<?xml version="1.0" encoding="utf-8"?>
<!--GearVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="OuyaSDKPlugin init"/>
	</init>

	<!-- optional files or directories to copy to Intermediate/Android/APK -->
	<resourceCopies>
		<copyFile src="$S(PluginDir)/../../Build/Android/libs/ouya-sdk.jar" dst="$S(BuildDir)/libs/ouya-sdk.jar" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/DebugInput.java" dst="$S(BuildDir)/src/tv/ouya/sdk/DebugInput.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/OuyaInputView.java" dst="$S(BuildDir)/src/tv/ouya/sdk/OuyaInputView.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/PluginTestGameActivity.java" dst="$S(BuildDir)/src/tv/ouya/sdk/PluginTestGameActivity.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/TestOnGameActivityListener.java" dst="$S(BuildDir)/src/tv/ouya/sdk/TestOnGameActivityListener.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/AsyncCppInitOuyaPlugin.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/AsyncCppInitOuyaPlugin.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/AsyncCppOuyaContentInit.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/AsyncCppOuyaContentInit.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestGamerInfo.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestGamerInfo.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestProducts.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestProducts.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestPurchase.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestPurchase.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestReceipts.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/AsyncCppOuyaRequestReceipts.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentDelete.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentDelete.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentDownload.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentDownload.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentInit.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentInit.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentPublish.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentPublish.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentSave.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentSave.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentSearchInstalled.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentSearchInstalled.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentSearchPublished.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentSearchPublished.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksContentUnpublish.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksContentUnpublish.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksInitOuyaPlugin.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksInitOuyaPlugin.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksRequestGamerInfo.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksRequestGamerInfo.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksRequestProducts.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksRequestProducts.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksRequestPurchase.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksRequestPurchase.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/CallbacksRequestReceipts.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/CallbacksRequestReceipts.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/IUnrealOuyaActivity.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/IUnrealOuyaActivity.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/UnrealOuyaFacade.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/UnrealOuyaFacade.java" />
		<copyFile src="$S(PluginDir)/../../Build/Android/src/tv/ouya/sdk/unreal/UnrealOuyaPlugin.java" dst="$S(BuildDir)/src/tv/ouya/sdk/unreal/UnrealOuyaPlugin.java" />
	</resourceCopies>

	<!-- optional additions to proguard -->
	<proguardAdditions>
		<insert>
			-keep class tv.ouya.** {
			*;
			}
			-keep class android.app.** {
			*;
			}
		</insert>
	</proguardAdditions>

	<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		<insert>
import android.view.KeyEvent;
import java.util.ArrayList;
import java.util.List;
		</insert>
	</gameActivityImportAdditions>

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>
	/**
	UE4 plugins can use the GameActivity's listener to get
	the activity lifecycle events.
	*/
	public interface OnGameActivityListener {

		// listeners receive motion events
		boolean dispatchGenericMotionEvent(MotionEvent motionEvent);

		// listeners receive key events
		boolean dispatchKeyEvent(KeyEvent keyEvent);

		// listeners receive activity result events
		boolean onActivityResult(int requestCode, int resultCode, Intent data);

		// listeners receive create events
		void onCreate(Bundle savedInstanceState);

		// listeners receive destroy events
		void onDestroy();

		// listeners receive pause events
		void onPause();

		// listeners receive resume events
		void onResume();

		// listeners receive start events
		void onStart();

		// listeners receive stop events
		void onStop();
	}

	// The list of game activity listeners
	private static List&lt;OnGameActivityListener&gt; sOnGameActivityListeners = new ArrayList();

	@Override
	public boolean dispatchGenericMotionEvent(MotionEvent motionEvent) {
		// the event will be handled by listeners if provided
		if (sOnGameActivityListeners.size() > 0) {
			for (OnGameActivityListener listener : sOnGameActivityListeners) {
				boolean result = listener.dispatchGenericMotionEvent(motionEvent);
				if (result) {
					//handled by listener
					return true;
				}
			}
			// the event was not handled
			return false;
		}
		// default behaviour
		return super.dispatchGenericMotionEvent(motionEvent);
	}

	@Override
	public boolean dispatchKeyEvent(KeyEvent keyEvent) {
		// the event will be handled by listeners if provided
		if (sOnGameActivityListeners.size() > 0) {
			for (OnGameActivityListener listener : sOnGameActivityListeners) {
				boolean result = listener.dispatchKeyEvent(keyEvent);
				if (result) {
					//handled by listener
					return true;
				}
			}
			// the event was not handled
			return false;
		}
		// default behaviour
		return super.dispatchKeyEvent(keyEvent);
	}

	// register a listener to receive activity lifecycle callbacks
	public static void registerOnGameActivityListener(OnGameActivityListener listener) {
		// register each listener only once
		if (!sOnGameActivityListeners.contains(listener)) {
			sOnGameActivityListeners.add(listener);
		}
	}

	// the callback will no longer receive activity lifecycle callbacks
	public static void unregisterOnGameActivityListener(OnGameActivityListener listener) {
		// remove the listener
		if (sOnGameActivityListeners.contains(listener)) {
			sOnGameActivityListeners.remove(listener);
		}
	}
		</insert>
	</gameActivityClassAdditions>

	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
		// notify listeners
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			listener.onCreate(savedInstanceState);
		}
		</insert>
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		// notify listeners
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			listener.onDestroy();
		}
		</insert>
	</gameActivityOnDestroyAdditions>

	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>
		// notify listeners
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			listener.onStart();
		}
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>
		// notify listeners
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			listener.onStop();
		}
		</insert>
	</gameActivityOnStopAdditions>

	<!-- optional additions to GameActivity onPause in GameActivity.java -->
	<gameActivityOnPauseAdditions>
		<insert>
		// notify listeners
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			listener.onPause();
		}
		</insert>
	</gameActivityOnPauseAdditions>

	<!-- optional additions to GameActivity onResume in GameActivity.java -->
	<gameActivityOnResumeAdditions>
		<insert>
		// notify listeners
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			listener.onResume();
		}
		</insert>
	</gameActivityOnResumeAdditions>

	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
		<insert>
		// listeners have a chance to process the activity result
		for (OnGameActivityListener listener : sOnGameActivityListeners) {
			// if a listener returns true, the activity result has been handled
			if (listener.onActivityResult(requestCode, resultCode, data)) {
				// no further processing needed
				return;
			}
		}
		</insert>
	</gameActivityOnActivityResultAdditions>

	<!-- optional updates applied to AndroidManifest.xml -->
	<androidManifestUpdates>
		<!-- update the GameActivity application -->
		<loopElements tag="application">
			<addAttribute tag="application" name="android:logo" value="@drawable/leanback_icon"/>
			<addAttribute tag="application" name="android:isGame" value="true"/>
		</loopElements>
		<!-- update the GameActivity activity -->
		<loopElements tag="activity">
			<setStringFromAttribute result="activityName" tag="$" name="android:name"/>
			<setBoolIsEqual result="bGameActivity" arg1="$S(activityName)" arg2="com.epicgames.ue4.SplashActivity"/>
			<if condition="bGameActivity">
				<true>
					<!-- add to intent-filter -->
					<setElement result="intentInfo" value="category"/>
					<addAttribute tag="$intentInfo" name="android:name" value="android.intent.category.LEANBACK_LAUNCHER"/>
					<addElement tag="intent-filter" name="intentInfo"/>
					<!-- add to intent-filter -->
					<setElement result="intentInfo" value="category"/>
					<addAttribute tag="$intentInfo" name="android:name" value="tv.ouya.intent.category.GAME"/>
					<addElement tag="intent-filter" name="intentInfo"/>
				</true>
			</if>
		</loopElements>
	</androidManifestUpdates>

</root>
